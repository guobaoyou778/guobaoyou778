結合テストの目的
個々のモジュールやコンポーネントはシステムの個別の機能を担っており、
結合テストは、これらのモジュールが予期した通りに連携して動作することを検証します。

具体的な例としては、オンラインショッピングシステムシステムには、
商品検索、カートへの追加、注文処理などの複数の機能があります。
これらの機能は、それぞれ異なるモジュールで実装されています。
結合テストでは、これらのモジュールが相互に連携してシステム全体として機能することを確認します。
例えば、商品を検索し、カートに追加し、注文処理を進める流れを検証します。
これにより、システム全体の信頼性と安定性を確保し、エンドユーザーに安心して使ってもらえる製品を提供することができます。


結合テストの観点
データの整合性：
モジュール間でデータが適切に受け渡され、変換や損失がないこと、データの型や形式が予期した通りであるを確認します。

インターフェースの適合性：
モジュール間のインターフェースが正しく設計されており、互いに適切に通信できることを確認します。
これには、関数の呼び出しやプロトコルの確認、APIの使用方法などが含まれます。

機能の連携：
各モジュールの機能が正しく連携し、システム全体として期待される動作を達成できることを検証します。

パフォーマンス：
モジュール間の連携において、システム全体のパフォーマンスが適切であり、応答時間や処理速度がユーザーにとって十分なレベルであることを検証します。

エラーハンドリング：
エラーや例外を適切に処理し、予期しない動作やクラッシュが発生しないことを確認します。

セキュリティ：
モジュール間の通信がセキュアであり、外部の攻撃やデータ漏洩が防止されていることを確認します。



単体テストの目的

コードを個々の関数、クラス、メソッドなどの単位で切り分けて期待される動作が満たされているかを確認します。
